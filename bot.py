import os
import asyncio
import logging
import tempfile
import yt_dlp
import re
import time
import random
import requests
import json
from pyrogram import Client, filters
from pyrogram.errors import BadRequest, BadMsgNotification

API_ID = 26670278
API_HASH = "e3d77390fd9c22d98bb6bddca86fef1a"
BOT_TOKEN = "6788128988:AAEMmCSafiiEqtS5UWQQxfo--W0On7B6Q08"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_processing = {}
processed_messages = set()

class SafeClient(Client):
    async def send(self, *args, **kwargs):
        for attempt in range(3):
            try:
                return await super().send(*args, **kwargs)
            except BadMsgNotification as e:
                if e.error_code == 16:
                    logger.warning(f"BadMsgNotification [16], –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3")
                    self.session.msg_id_offset = int(time.time() * 2**32)
                    await asyncio.sleep(1)
                else:
                    raise
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å msg_id —Å Telegram")

app = SafeClient(
    "video_bot_new_session_2024",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    sleep_threshold=15
)

# ------------------------- YOUTUBE –§–£–ù–ö–¶–ò–ò -------------------------

def download_youtube_video(url: str, out_path: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ YouTube –≤–∏–¥–µ–æ"""
    ydl_opts = {
        "outtmpl": os.path.join(out_path, "%(title).100s.%(ext)s"),
        "format": "best[height<=720]/best",
        "noplaylist": True,
        "quiet": False,
        "ignoreerrors": True,
        "retries": 3,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            
            if not os.path.exists(filename):
                raise Exception(f"–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {filename}")
                
            file_size = os.path.getsize(filename)
            if file_size == 0:
                os.remove(filename)
                raise Exception(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {filename}")
                
            logger.info(f"‚úÖ YouTube –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {filename}")
            return filename
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ YouTube: {e}")
        raise

# ------------------------- INSTAGRAM –§–£–ù–ö–¶–ò–ò (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï) -------------------------

def check_cookies_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º cookies —Ñ–∞–π–ª"""
    if not os.path.exists("cookies.txt"):
        logger.error("‚ùå –§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    file_size = os.path.getsize("cookies.txt")
    if file_size == 0:
        logger.error("‚ùå –§–∞–π–ª cookies.txt –ø—É—Å—Ç–æ–π!")
        return False
        
    logger.info("‚úÖ –§–∞–π–ª cookies.txt –Ω–∞–π–¥–µ–Ω")
    return True

def download_instagram_with_retry(url: str, out_path: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Instagram —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    if not check_cookies_file():
        raise FileNotFoundError("–§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
    
    methods = [
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥",
            "opts": {
                "outtmpl": os.path.join(out_path, "ig_%(title)s.%(ext)s"),
                "cookiefile": "cookies.txt",
                "quiet": False,
                "ignoreerrors": True,
                "retries": 2,
            }
        },
        {
            "name": "–ú–µ—Ç–æ–¥ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º", 
            "opts": {
                "outtmpl": os.path.join(out_path, "ig_media.%(ext)s"),
                "cookiefile": "cookies.txt",
                "quiet": False,
                "ignoreerrors": True,
                "retries": 3,
                "format": "best"
            }
        },
        {
            "name": "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥",
            "opts": {
                "outtmpl": os.path.join(out_path, "instagram.%(ext)s"),
                "cookiefile": "cookies.txt", 
                "quiet": False,
                "ignoreerrors": True,
                "retries": 5,
                "fragment_retries": 5,
                "skip_unavailable_fragments": True,
                "extract_flat": False,
            }
        }
    ]
    
    last_error = None
    
    for method in methods:
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É—é {method['name']}...")
            
            with yt_dlp.YoutubeDL(method['opts']) as ydl:
                info = ydl.extract_info(url, download=True)
                
                # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                for file in os.listdir(out_path):
                    file_path = os.path.join(out_path, file)
                    if os.path.isfile(file_path) and os.path.getsize(file_path) > 0:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_path}")
                        return file_path, info
                
                raise Exception("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                
        except Exception as e:
            last_error = e
            logger.warning(f"‚ùå {method['name']} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            continue
    
    raise Exception(f"–í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")

def get_media_type(file_path: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞"""
    if not file_path:
        return "unknown"
    
    ext = file_path.lower().split('.')[-1]
    
    if ext in ['mp4', 'webm', 'mkv', 'mov', 'avi']:
        return "video"
    elif ext in ['jpg', 'jpeg', 'png', 'webp', 'gif']:
        return "photo"
    else:
        return "unknown"

# ------------------------- INSTAGRAM ALTERNATIVE METHODS -------------------------

def test_instagram_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Instagram"""
    if not check_cookies_file():
        return False, "Cookies —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    test_url = "https://www.instagram.com/p/CuZkKzOsErk/"  # –ü—É–±–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    
    try:
        ydl_opts = {
            "quiet": True,
            "skip_download": True,
            "cookiefile": "cookies.txt",
            "ignoreerrors": True,
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(test_url, download=False)
            if info:
                return True, "Instagram –¥–æ—Å—Ç—É–ø–µ–Ω"
            else:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–æ—Å—Ç–µ"
                
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Instagram: {e}"

# ------------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò -------------------------

def extract_first_url(text: str) -> str:
    match = re.search(r"(https?://[^\s]+)", text)
    return match.group(1) if match else ""

def normalize_url(url: str) -> str:
    if "youtu.be/" in url:
        video_id = url.split("/")[-1].split("?")[0]
        return f"https://www.youtube.com/watch?v={video_id}"
    if "youtube.com/shorts/" in url:
        video_id = url.split("/shorts/")[-1].split("?")[0]
        return f"https://www.youtube.com/watch?v={video_id}"
    return url

async def safe_send_video(client, chat_id, file_path, caption=""):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ"""
    try:
        if not os.path.exists(file_path):
            raise Exception(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            raise Exception(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {file_path}")
            
        return await client.send_video(
            chat_id=chat_id,
            video=file_path,
            caption=caption,
            supports_streaming=True
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
        raise

async def safe_send_photo(client, chat_id, file_path, caption=""):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
    try:
        if not os.path.exists(file_path):
            raise Exception(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            raise Exception(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {file_path}")
            
        return await client.send_photo(
            chat_id=chat_id,
            photo=file_path,
            caption=caption
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        raise

# ------------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò -------------------------

@app.on_message(filters.command("start"))
async def start(client, message):
    message_id = f"start_{message.id}_{message.from_user.id}"
    
    if message_id in processed_messages:
        return
        
    processed_messages.add(message_id)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Instagram –¥–æ—Å—Ç—É–ø
    ig_status, ig_message = test_instagram_access()
    ig_status_text = "‚úÖ Instagram –¥–æ—Å—Ç—É–ø–µ–Ω" if ig_status else f"‚ùå {ig_message}"
    
    await message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        f"üì• –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞:\n"
        f"‚Ä¢ YouTube (–≤–∏–¥–µ–æ, Shorts) - ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
        f"‚Ä¢ Instagram - {ig_status_text}\n\n"
        f"‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ!\n"
        f"üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤"
    )

@app.on_message(filters.command(["help", "info"]))
async def help_command(client, message):
    message_id = f"help_{message.id}_{message.from_user.id}"
    
    if message_id in processed_messages:
        return
        
    processed_messages.add(message_id)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Instagram –¥–æ—Å—Ç—É–ø
    ig_status, ig_message = test_instagram_access()
    
    help_text = (
        "ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
        "üì• **YouTube:**\n"
        "‚Ä¢ –í–∏–¥–µ–æ –ª—é–±–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ YouTube Shorts\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ‚úÖ\n\n"
    )
    
    if ig_status:
        help_text += (
            "üì∏ **Instagram:**\n"
            "‚Ä¢ –í–∏–¥–µ–æ –∏ —Ä–∏–ª—Å—ã\n" 
            "‚Ä¢ –§–æ—Ç–æ –∏ –ø–æ—Å—Ç—ã\n"
            "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è cookies.txt ‚úÖ\n\n"
        )
    else:
        help_text += (
            "üì∏ **Instagram:**\n"
            f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚ùå\n"
            f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {ig_message}\n\n"
        )
    
    help_text += "‚ö° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É!"
    
    await message.reply_text(help_text)

@app.on_message(filters.command("status"))
async def status_command(client, message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    ig_status, ig_message = test_instagram_access()
    
    status_text = (
        "ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
        f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(processed_messages)}\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_processing)}\n\n"
        f"üé• **YouTube:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
        f"üì∏ **Instagram:** {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if ig_status else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
    )
    
    if not ig_status:
        status_text += f"\nüîß –ü—Ä–æ–±–ª–µ–º–∞ Instagram: {ig_message}"
    
    await message.reply_text(status_text)

@app.on_message(filters.text & filters.private)
async def handle_text(client, message):
    if message.text.startswith('/'):
        return
    
    message_id = f"text_{message.id}_{message.from_user.id}"
    
    if message_id in processed_messages:
        return
        
    user_id = message.from_user.id
    text = message.text.strip()
    
    url = extract_first_url(text)
    if not url:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã
    supported_domains = ["youtube.com", "youtu.be", "instagram.com"]
    if not any(domain in url for domain in supported_domains):
        await message.reply_text(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞\n\n"
            "üì• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ:\n"
            "‚Ä¢ YouTube (youtube.com, youtu.be)\n"
            "‚Ä¢ Instagram (instagram.com)\n\n"
            "‚ö° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"
        )
        return

    processed_messages.add(message_id)
    
    if user_id in user_processing and user_processing[user_id].get('processing'):
        temp_msg = await message.reply_text("‚è≥ –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        await asyncio.sleep(3)
        await temp_msg.delete()
        processed_messages.discard(message_id)
        return

    user_processing[user_id] = {'processing': True}
    status = None
    
    try:
        url = normalize_url(url)
        status = await message.reply_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏...")
        
        if "youtube" in url or "youtu.be" in url:
            # YouTube –æ–±—Ä–∞–±–æ—Ç–∫–∞
            tmp_dir = tempfile.mkdtemp()
            file_path = None
            
            try:
                await status.edit_text("üì• –°–∫–∞—á–∏–≤–∞—é YouTube –≤–∏–¥–µ–æ...")
                file_path = await asyncio.to_thread(download_youtube_video, url, tmp_dir)
                
                await status.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
                await safe_send_video(
                    client,
                    message.chat.id,
                    file_path,
                    caption="üì• YouTube –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @azams_bot"
                )
                logger.info("‚úÖ YouTube –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            except Exception as e:
                logger.error(f"‚ùå YouTube –æ—à–∏–±–∫–∞: {e}")
                raise Exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å YouTube –≤–∏–¥–µ–æ\n\n–ü—Ä–∏—á–∏–Ω–∞: {str(e)}")
                
            finally:
                # –û—á–∏—Å—Ç–∫–∞
                if file_path and os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                    except:
                        pass
                if os.path.exists(tmp_dir):
                    try:
                        for file in os.listdir(tmp_dir):
                            os.remove(os.path.join(tmp_dir, file))
                        os.rmdir(tmp_dir)
                    except:
                        pass
                
        elif "instagram.com" in url:
            # Instagram –æ–±—Ä–∞–±–æ—Ç–∫–∞
            tmp_dir = tempfile.mkdtemp()
            file_path = None
            
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
                ig_status, ig_message = test_instagram_access()
                if not ig_status:
                    raise Exception(f"Instagram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ig_message}")
                
                await status.edit_text("üì• –°–∫–∞—á–∏–≤–∞—é Instagram –∫–æ–Ω—Ç–µ–Ω—Ç...")
                
                # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                file_path, info = await asyncio.to_thread(download_instagram_with_retry, url, tmp_dir)
                
                if not file_path:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
                media_type = get_media_type(file_path)
                await status.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
                
                if media_type == "video":
                    await safe_send_video(
                        client,
                        message.chat.id,
                        file_path,
                        caption="üì• Instagram –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @azams_bot"
                    )
                    logger.info("‚úÖ Instagram –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    
                elif media_type == "photo":
                    await safe_send_photo(
                        client,
                        message.chat.id,
                        file_path,
                        caption="üì∏ Instagram —Ñ–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @azams_bot"
                    )
                    logger.info("‚úÖ Instagram —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    
                else:
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ
                    try:
                        await safe_send_video(
                            client,
                            message.chat.id,
                            file_path,
                            caption="üì• Instagram –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ @azams_bot"
                        )
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –≤–∏–¥–µ–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                        await safe_send_photo(
                            client,
                            message.chat.id,
                            file_path,
                            caption="üì∏ Instagram –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ @azams_bot"
                        )

            except Exception as e:
                logger.error(f"‚ùå Instagram –æ—à–∏–±–∫–∞: {e}")
                
                # –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_msg = str(e)
                if "cookies" in error_msg.lower():
                    user_msg = "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å cookies —Ñ–∞–π–ª–æ–º\n\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n‚Ä¢ –§–∞–π–ª cookies.txt —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n‚Ä¢ –û–Ω –Ω–µ –ø—É—Å—Ç–æ–π\n‚Ä¢ Cookies –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ"
                elif "login" in error_msg.lower() or "auth" in error_msg.lower():
                    user_msg = "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\nInstagram —Ç—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cookies —Ñ–∞–π–ª."
                elif "private" in error_msg.lower():
                    user_msg = "‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n\n–≠—Ç–æ—Ç Instagram –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –ù—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º."
                elif "unavailable" in error_msg.lower():
                    user_msg = "‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n–≠—Ç–æ—Ç –ø–æ—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –∏–ª–∏ —Å–∫—Ä—ã—Ç."
                else:
                    user_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Instagram –∫–æ–Ω—Ç–µ–Ω—Ç\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –î—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞\n‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å cookies —Ñ–∞–π–ª"
                
                raise Exception(user_msg)
                
            finally:
                # –û—á–∏—Å—Ç–∫–∞
                if file_path and os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                    except:
                        pass
                if os.path.exists(tmp_dir):
                    try:
                        for file in os.listdir(tmp_dir):
                            os.remove(os.path.join(tmp_dir, file))
                        os.rmdir(tmp_dir)
                    except:
                        pass

        # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await message.delete()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        if status:
            try:
                error_msg = await message.reply_text(str(e))
                await asyncio.sleep(10)
                await error_msg.delete()
            except:
                pass
                
    finally:
        if status:
            try:
                await status.delete()
            except:
                pass
        if user_id in user_processing:
            user_processing[user_id]['processing'] = False

# ------------------------- –ó–ê–ü–£–°–ö -------------------------
if __name__ == "__main__":
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
    old_sessions = ["fast_bot.session", "fast_bot.session-journal"]
    for session_file in old_sessions:
        if os.path.exists(session_file):
            try:
                os.remove(session_file)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {session_file}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ cookies –∏ —Ç–µ—Å—Ç Instagram
    ig_status, ig_message = test_instagram_access()
    if ig_status:
        logger.info("‚úÖ Instagram –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        logger.warning(f"‚ö†Ô∏è Instagram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ig_message}")
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫...")
    app.run()
