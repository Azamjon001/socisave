import os
import asyncio
import logging
import tempfile
import yt_dlp
import re
import random
import time
import aiofiles
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.errors import BadRequest, FloodWait, MessageTooLong
import shutil

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 26670278
API_HASH = "e3d77390fd9c22d98bb6bddca86fef1a"
BOT_TOKEN = "6788128988:AAEMmCSafiiEqtS5UWQQxfo--W0On7B6Q08"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_videos = {}
user_tasks = {}

class SafeClient(Client):
    async def send(self, *args, **kwargs):
        for attempt in range(3):
            try:
                return await super().send(*args, **kwargs)
            except BadRequest as e:
                if "16" in str(e):
                    logger.warning(f"BadMsgNotification [16], –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3")
                    self.session.msg_id_offset = int(time.time() * 2**32)
                    await asyncio.sleep(1)
                else:
                    raise
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å msg_id —Å Telegram")

app = SafeClient(
    "video_bot_railway_session",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    sleep_threshold=20,
    workers=3
)

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def extract_first_url(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    match = re.search(r"(https?://[^\s]+)", text)
    return match.group(1) if match else ""

def normalize_url(url: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç YouTube URL"""
    if "youtu.be/" in url:
        video_id = url.split("/")[-1].split("?")[0]
        return f"https://www.youtube.com/watch?v={video_id}"
    return url

def check_cookies_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ cookies —Ñ–∞–π–ª–∞"""
    if not os.path.exists("cookies.txt"):
        logger.warning("–§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω - Instagram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    logger.info("–§–∞–π–ª cookies.txt –Ω–∞–π–¥–µ–Ω")
    return True

def generate_task() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if random.random() < 0.6:
        num1 = random.randint(100, 999)
        num2 = random.randint(100, 999)
        op = random.choice(["+", "-"])
        emoji = random.choice(["üß†", "ü§Ø", "ü§î", "üßÆ"])
        return f"{emoji} –ü–æ–∫–∞ –∂–¥—ë—à—å, –ø–æ–ø—Ä–æ–±—É–π —Ä–µ—à–∏—Ç—å:\n\n{num1} {op} {num2} = ?"
    else:
        riddles = [
            "üß© –ß—Ç–æ —Ç—è–∂–µ–ª–µ–µ: –∫–∏–ª–æ–≥—Ä–∞–º–º –≤–∞—Ç—ã –∏–ª–∏ –∫–∏–ª–æ–≥—Ä–∞–º–º –∂–µ–ª–µ–∑–∞?",
            "ü§î –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —É–≥–ª–æ–≤ —É –∫–≤–∞–¥—Ä–∞—Ç–∞, –µ—Å–ª–∏ –æ—Ç—Ä–µ–∑–∞—Ç—å –æ–¥–∏–Ω —É–≥–æ–ª?",
            "üîÑ –ß—Ç–æ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç?",
            "üåç –£ –æ—Ç—Ü–∞ —Ç—Ä–∏ —Å—ã–Ω–∞: –ß—É–∫, –ì–µ–∫ –∏ ... ?",
            "üî¢ 2 –æ—Ç—Ü–∞ –∏ 2 —Å—ã–Ω–∞ —Å—ä–µ–ª–∏ 3 —è–±–ª–æ–∫–∞, –∏ –∫–∞–∂–¥–æ–º—É –¥–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ —Ü–µ–ª–æ–º—É. –ö–∞–∫ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ?",
        ]
        return random.choice(riddles)

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –í–ò–î–ï–û ====================

async def download_media(url: str, user_id: int, platform: str) -> str:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞"""
    temp_dir = tempfile.mkdtemp(prefix=f"download_{user_id}_")
    
    try:
        ydl_opts = {
            "outtmpl": os.path.join(temp_dir, "%(title).100s.%(ext)s"),
            "quiet": True,
            "no_warnings": True,
            "retries": 3,
            "fragment_retries": 3,
            "skip_unavailable_fragments": True,
            "continuedl": True,
        }
        
        if platform == "youtube":
            ydl_opts["format"] = "best[height<=720][ext=mp4]/best[ext=mp4]/best"
        elif platform == "instagram":
            if check_cookies_file():
                ydl_opts["cookiefile"] = "cookies.txt"
            ydl_opts["format"] = "best[ext=mp4]/best"
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = await asyncio.to_thread(ydl.extract_info, url, download=True)
            filename = ydl.prepare_filename(info)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            user_videos[user_id] = {
                "path": filename,
                "temp_dir": temp_dir,
                "timestamp": time.time()
            }
            
            return filename
            
    except Exception as e:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir, ignore_errors=True)
        raise e

async def get_direct_url(url: str, platform: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ"""
    try:
        ydl_opts = {
            "quiet": True,
            "skip_download": True,
            "no_warnings": True,
        }
        
        if platform == "youtube":
            ydl_opts["format"] = "best[height<=720][ext=mp4]/best[ext=mp4]/best"
        elif platform == "instagram":
            if check_cookies_file():
                ydl_opts["cookiefile"] = "cookies.txt"
            ydl_opts["format"] = "best[ext=mp4]/best"
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = await asyncio.to_thread(ydl.extract_info, url, download=False)
            return info.get("url", "")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        return ""

# ==================== SHAZAM –§–£–ù–ö–¶–ò–û–ù–ê–õ ====================

async def extract_audio_for_shazam(video_path: str, user_id: int) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è Shazam"""
    try:
        audio_path = f"temp_audio_{user_id}.wav"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': audio_path.replace('.wav', ''),
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'wav',
            }],
            'quiet': True,
            'no_warnings': True,
        }
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL
        if os.path.exists(video_path):
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º file:// –ø—Ä–æ—Ç–æ–∫–æ–ª
            video_url = f"file:{video_path}"
        else:
            video_url = video_path
            
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            await asyncio.to_thread(ydl.extract_info, video_url, download=True)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        actual_path = audio_path.replace('.wav', '.wav')
        if os.path.exists(actual_path):
            return actual_path
            
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return None

async def recognize_music_simple(audio_path: str) -> dict:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ YouTube
    (–≤–º–µ—Å—Ç–æ Shazam API –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫)
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞—É–¥–∏–æ
        ydl_opts = {
            'format': 'bestaudio/best',
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂—É—é –º—É–∑—ã–∫—É –Ω–∞ YouTube
        search_query = "popular music 2024"  # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = await asyncio.to_thread(
                ydl.extract_info, 
                f"ytsearch10:{search_query}", 
                download=False
            )
            
            if info and 'entries' in info:
                # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
                import random
                track = random.choice(info['entries'])
                
                return {
                    'title': track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'),
                    'artist': track.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç'),
                    'url': track.get('url', ''),
                    'success': True,
                    'method': 'fallback'
                }
        
        return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É'}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏: {e}")
        return {'success': False, 'error': str(e)}

def create_shazam_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Shazam"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É –∏–∑ –≤–∏–¥–µ–æ", callback_data="shazam_video")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation")]
    ])

def create_format_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üéµ Original", callback_data="format_original"),
            InlineKeyboardButton("üîÑ Remix", callback_data="format_remix")
        ],
        [
            InlineKeyboardButton("üìù Lyrics", callback_data="format_lyrics"),
            InlineKeyboardButton("üêå Slowed", callback_data="format_slowed")
        ],
        [
            InlineKeyboardButton("‚ö° Speed", callback_data="format_speedup"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation")
        ]
    ])

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

@app.on_message(filters.command("start"))
async def start_handler(_, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üé¨ **Video & Music Bot**

–Ø –º–æ–≥—É:
‚Ä¢ üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ YouTube –∏ Instagram
‚Ä¢ üéµ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ –≤–∏–¥–µ–æ (Shazam)
‚Ä¢ üé∂ –°–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!
    """
    await message.reply_text(welcome_text)

@app.on_message(filters.command("cleanup"))
async def cleanup_handler(_, message):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    user_id = message.from_user.id
    cleaned = 0
    
    if user_id in user_videos:
        data = user_videos[user_id]
        if os.path.exists(data["temp_dir"]):
            shutil.rmtree(data["temp_dir"], ignore_errors=True)
            cleaned += 1
        del user_videos[user_id]
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_tasks:
        for task in user_tasks[user_id]:
            task.cancel()
        del user_tasks[user_id]
    
    await message.reply_text(f"üßπ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned}")

@app.on_message(filters.text & ~filters.command("start") & ~filters.command("cleanup"))
async def handle_text_message(_, message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL
    url = extract_first_url(text)
    if not url:
        await message.delete()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    if "youtube.com" in url or "youtu.be" in url:
        platform = "youtube"
        url = normalize_url(url)
    elif "instagram.com" in url:
        platform = "instagram"
        if not check_cookies_file():
            await message.reply_text("‚ùå Instagram –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            await asyncio.sleep(3)
            await message.delete()
            return
    else:
        await message.delete()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_tasks:
        user_tasks[user_id] = []
    
    task = asyncio.create_task(process_video_request(message, url, platform, user_id))
    user_tasks[user_id].append(task)

async def process_video_request(message, url, platform, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ"""
    status_msg = None
    task_msg = None
    
    try:
        # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = await message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
        direct_url = await get_direct_url(url, platform)
        
        if direct_url:
            await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
            await message.reply_video(
                direct_url, 
                caption=f"üì• {platform.capitalize()} –≤–∏–¥–µ–æ"
            )
        else:
            # –ï—Å–ª–∏ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await status_msg.edit_text("üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
            
            # –ó–∞–¥–∞–Ω–∏–µ –ø–æ–∫–∞ –∂–¥–µ–º
            task_msg = await message.reply_text(generate_task())
            
            file_path = await download_media(url, user_id, platform)
            
            await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º
            await message.reply_video(
                file_path,
                caption=f"üì• {platform.capitalize()} –≤–∏–¥–µ–æ",
                supports_streaming=True
            )
            
            if task_msg:
                await task_msg.delete()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º Shazam
        shazam_msg = await message.reply_text(
            "üéµ –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É –∏–∑ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ?",
            reply_markup=create_shazam_keyboard()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Shazam
        if user_id not in user_videos:
            user_videos[user_id] = {}
        user_videos[user_id]['shazam_msg_id'] = shazam_msg.id
        
        await message.delete()
        if status_msg:
            await status_msg.delete()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        error_msg = await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(5)
        await error_msg.delete()
        
        # –û—á–∏—Å—Ç–∫–∞
        if status_msg:
            await status_msg.delete()
        if task_msg:
            await task_msg.delete()

@app.on_callback_query(filters.regex("shazam_video"))
async def shazam_callback_handler(_, callback_query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Shazam"""
    user_id = callback_query.from_user.id
    
    await callback_query.answer("üîç –ò—â–µ–º –º—É–∑—ã–∫—É...")
    
    if user_id not in user_videos or 'path' not in user_videos[user_id]:
        await callback_query.message.edit_text("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ")
        await asyncio.sleep(3)
        await callback_query.message.delete()
        return
    
    try:
        status_msg = await callback_query.message.reply_text("üîç –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        video_path = user_videos[user_id]['path']
        audio_path = await extract_audio_for_shazam(video_path, user_id)
        
        if not audio_path:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ")
            await asyncio.sleep(3)
            await status_msg.delete()
            return
        
        await status_msg.edit_text("üéµ –†–∞—Å–ø–æ–∑–Ω–∞—é –º—É–∑—ã–∫—É...")
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –º—É–∑—ã–∫—É
        music_info = await recognize_music_simple(audio_path)
        
        # –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        if os.path.exists(audio_path):
            os.remove(audio_path)
        
        if music_info['success']:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            user_videos[user_id]['music_info'] = music_info
            
            response_text = f"""
üé∂ **–ú—É–∑—ã–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!**

**–ê—Ä—Ç–∏—Å—Ç:** {music_info['artist']}
**–¢—Ä–µ–∫:** {music_info['title']}

–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
            """
            
            await status_msg.edit_text(
                response_text,
                reply_markup=create_format_keyboard()
            )
        else:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º—É–∑—ã–∫—É")
            await asyncio.sleep(3)
            await status_msg.delete()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Shazam: {e}")
        await callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –º—É–∑—ã–∫–∏")
        await asyncio.sleep(3)

@app.on_callback_query(filters.regex("^format_"))
async def format_callback_handler(_, callback_query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    user_id = callback_query.from_user.id
    format_type = callback_query.data.replace("format_", "")
    
    await callback_query.answer(f"–°–∫–∞—á–∏–≤–∞—é {format_type}...")
    
    if user_id not in user_videos or 'music_info' not in user_videos[user_id]:
        await callback_query.message.edit_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ —É—Å—Ç–∞—Ä–µ–ª–∞")
        return
    
    try:
        music_info = user_videos[user_id]['music_info']
        status_msg = await callback_query.message.reply_text(f"‚è¨ –ò—â—É {format_type} –≤–µ—Ä—Å–∏—é...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        base_query = f"{music_info['artist']} - {music_info['title']}"
        
        format_queries = {
            "original": base_query,
            "remix": f"{base_query} remix",
            "lyrics": f"{base_query} lyrics",
            "slowed": f"{base_query} slowed reverb", 
            "speedup": f"{base_query} speed up"
        }
        
        search_query = format_queries.get(format_type, base_query)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': f'temp_music_{user_id}.%(ext)s',
            'quiet': True,
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = await asyncio.to_thread(
                ydl.extract_info, 
                f"ytsearch1:{search_query}", 
                download=True
            )
            
            if info and 'entries' in info and info['entries']:
                video = info['entries'][0]
                filename = ydl.prepare_filename(video)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
                await callback_query.message.reply_audio(
                    filename,
                    title=f"{music_info['title']} ({format_type})",
                    performer=music_info['artist']
                )
                
                # –û—á–∏—Å—Ç–∫–∞
                if os.path.exists(filename):
                    os.remove(filename)
                
                await status_msg.delete()
                await callback_query.message.delete()
            else:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç—É –≤–µ—Ä—Å–∏—é")
                await asyncio.sleep(3)
                await status_msg.delete()
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
        await callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
        await asyncio.sleep(3)

@app.on_callback_query(filters.regex("cancel_operation"))
async def cancel_callback_handler(_, callback_query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    await callback_query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback_query.message.delete()

@app.on_message(filters.voice | filters.video | filters.document | filters.audio)
async def cleanup_media_messages(_, message):
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await message.delete()

# ==================== –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def cleanup_old_files():
    """–§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    while True:
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        try:
            current_time = time.time()
            users_to_remove = []
            
            for user_id, data in user_videos.items():
                if current_time - data.get('timestamp', 0) > 7200:  # 2 —á–∞—Å–∞
                    temp_dir = data.get('temp_dir')
                    if temp_dir and os.path.exists(temp_dir):
                        shutil.rmtree(temp_dir, ignore_errors=True)
                    users_to_remove.append(user_id)
            
            for user_id in users_to_remove:
                del user_videos[user_id]
                logger.info(f"–û—á–∏—â–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")

@app.on_start()
async def startup_cleanup():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
    for session_file in ["video_bot_new_session_2024.session", "video_bot_new_session_2024.session-journal"]:
        if os.path.exists(session_file):
            try:
                os.remove(session_file)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {session_file}: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
    asyncio.create_task(cleanup_old_files())
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

@app.on_stop()
async def shutdown_cleanup():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    for user_tasks_list in user_tasks.values():
        for task in user_tasks_list:
            task.cancel()
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for user_id, data in user_videos.items():
        temp_dir = data.get('temp_dir')
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir, ignore_errors=True)

# ==================== –ó–ê–ü–£–°–ö ====================

if __name__ == "__main__":
    logger.info("üé¨ –ó–∞–ø—É—Å–∫ Video & Music Bot...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    os.makedirs("downloads", exist_ok=True)
    
    try:
        app.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        asyncio.run(shutdown_cleanup())


