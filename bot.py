import os
import asyncio
import logging
import tempfile
import yt_dlp
import re
import random
import time
import requests
import schedule
import threading
from pyrogram import Client, filters
from pyrogram.errors import BadRequest, BadMsgNotification
from pyrogram.types import InputMediaPhoto

API_ID = 26670278
API_HASH = "e3d77390fd9c22d98bb6bddca86fef1a"
BOT_TOKEN = "6788128988:AAEMmCSafiiEqtS5UWQQxfo--W0On7B6Q08"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------------- –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò -------------------------
def schedule_restart():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤"""
    def restart_job():
        logger.info("üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤...")
        os._exit(0)  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤ Railway
    
    schedule.every(12).hours.do(restart_job)
    
    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤)")

# ------------------------- SafeClient –¥–ª—è Railway -------------------------
class SafeClient(Client):
    async def send(self, *args, **kwargs):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å msg_id –ø—Ä–∏ –æ—à–∏–±–∫–µ [16].
        """
        for attempt in range(3):
            try:
                return await super().send(*args, **kwargs)
            except BadMsgNotification as e:
                if e.error_code == 16:
                    logger.warning(f"[WARN] BadMsgNotification [16], –∏—Å–ø—Ä–∞–≤–ª—è–µ–º msg_id, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3")
                    self.session.msg_id_offset = int(time.time() * 2**32)
                    await asyncio.sleep(1)
                else:
                    raise
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å msg_id —Å Telegram")

# ------------------------- –ò–ó–ú–ï–ù–ï–ù–û: –Ω–æ–≤–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏ -------------------------
app = SafeClient(
    "video_bot_new_session_2024",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    sleep_threshold=15
)

# ------------------------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -------------------------
def extract_first_url(text: str) -> str:
    match = re.search(r"(https?://[^\s]+)", text)
    return match.group(1) if match else ""

def normalize_url(url: str) -> str:
    if "youtu.be/" in url:
        video_id = url.split("/")[-1].split("?")[0]
        return f"https://www.youtube.com/watch?v={video_id}"
    return url

def get_youtube_direct_url(url: str) -> str:
    ydl_opts = {"quiet": True, "skip_download": True, "format": "mp4[height<=720]/best[ext=mp4]/best"}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        return info.get("url")

def download_youtube_video(url: str, out_path: str) -> str:
    ydl_opts = {
        "outtmpl": os.path.join(out_path, "%(title).50s.%(ext)s"),
        "format": "best[height<=720][ext=mp4]/best[ext=mp4]",
        "noplaylist": True,
        "quiet": True,
        "retries": 1,
        "merge_output_format": "mp4",
        "concurrent_fragment_downloads": 4,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        return ydl.prepare_filename(info)

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Instagram —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º cookies
def check_cookies_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies —Ñ–∞–π–ª–∞"""
    if not os.path.exists("cookies.txt"):
        logger.error("‚ùå –§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    logger.info("‚úÖ –§–∞–π–ª cookies.txt –Ω–∞–π–¥–µ–Ω")
    return True

def get_instagram_media_info(url: str):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Instagram (–≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ) –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    if not check_cookies_file():
        raise FileNotFoundError("–§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. Instagram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    ydl_opts = {
        "quiet": True,
        "skip_download": True,
        "cookiefile": "cookies.txt",
        "http_headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        }
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            media_type = "video" if info.get('url') and 'video' in info.get('ext', '') else "photo"
            
            # –î–ª—è —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if media_type == "photo" and 'url' in info:
                photo_urls = [info['url']]
            else:
                photo_urls = []
            
            return {
                'type': media_type,
                'url': info.get('url'),  # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ
                'title': info.get('title', 'Instagram Media'),
                'photo_urls': photo_urls,
                'duration': info.get('duration'),
                'width': info.get('width'),
                'height': info.get('height')
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Instagram: {e}")
        raise

def download_instagram_video(url: str, out_path: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ–º Instagram –≤–∏–¥–µ–æ –µ—Å–ª–∏ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    if not check_cookies_file():
        raise FileNotFoundError("–§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    ydl_opts = {
        "outtmpl": os.path.join(out_path, "%(title).50s.%(ext)s"),
        "format": "best[ext=mp4]/best",
        "cookiefile": "cookies.txt",
        "quiet": True,
        "http_headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return ydl.prepare_filename(info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Instagram –≤–∏–¥–µ–æ: {e}")
        raise

def download_instagram_photos(url: str, out_path: str) -> list:
    """–°–∫–∞—á–∏–≤–∞–µ–º Instagram —Ñ–æ—Ç–æ"""
    if not check_cookies_file():
        raise FileNotFoundError("–§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    ydl_opts = {
        "outtmpl": os.path.join(out_path, "%(title).50s.%(ext)s"),
        "format": "best",
        "cookiefile": "cookies.txt",
        "quiet": True,
        "http_headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
            if hasattr(info, 'url'):
                return [ydl.prepare_filename(info)]
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
            elif 'entries' in info:
                return [ydl.prepare_filename(entry) for entry in info['entries']]
            else:
                return [ydl.prepare_filename(info)]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Instagram —Ñ–æ—Ç–æ: {e}")
        raise

# ------------------------- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –û–ß–ò–°–¢–ö–ò -------------------------
user_processing = {}  # –•—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def cleanup_user_message(message, delay: int = 3):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
    try:
        await asyncio.sleep(delay)
        await message.delete()
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# ------------------------- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –•–≠–ù–î–õ–ï–†–´ -------------------------

@app.on_message(filters.command("start"))
async def start(_, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_msg = await message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "üì• –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Instagram ‚Äî —è —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–µ–±—è.\n"
        "üé• –ò–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube ‚Äî —Ç–æ–∂–µ —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ.\n\n"
        "‚ö° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç —Ç–≤–æ—é —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!"
    )

@app.on_message(filters.command(["help", "info"]))
async def help_command(_, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥"""
    help_text = (
        "ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
        "üì• –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞:\n"
        "‚Ä¢ Instagram –≤–∏–¥–µ–æ/—Ä–µ–µ–ª—å—Å/—Ñ–æ—Ç–æ\n" 
        "‚Ä¢ YouTube –≤–∏–¥–µ–æ\n\n"
        "üìå –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç —Ç–≤–æ—é —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
        "‚ö° –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        "üîÑ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤"
    )
    await message.reply_text(help_text)

@app.on_message(filters.text & filters.private)
async def handle_text(_, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –¢–û–õ–¨–ö–û –î–õ–Ø –°–°–´–õ–û–ö"""
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if message.text and message.text.startswith('/'):
        return
    
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL
    url = extract_first_url(text)
    if not url or not any(d in url for d in ["youtube.com", "youtu.be", "instagram.com"]):
        # –ù–ï —É–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_processing and user_processing[user_id].get('processing'):
        temp_msg = await message.reply_text("‚è≥ –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        await asyncio.sleep(3)
        await temp_msg.delete()
        return

    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
    user_processing[user_id] = {'processing': True}
    
    status = None
    
    try:
        url = normalize_url(url)
        status = await message.reply_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        if "youtube" in url or "youtu.be" in url:
            # YouTube –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –¢–û–õ–¨–ö–û –í–ò–î–ï–û
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                direct_url = await asyncio.to_thread(get_youtube_direct_url, url)
                await message.reply_video(
                    direct_url, 
                    caption="üì• YouTube –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @azams_bot"
                )
                logger.info("‚úÖ YouTube –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É")
                
            except Exception as e:
                # –ï—Å–ª–∏ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                await status.edit_text("üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
                tmp_dir = tempfile.mkdtemp()
                
                try:
                    file_path = await asyncio.to_thread(download_youtube_video, url, tmp_dir)
                    await message.reply_video(
                        file_path, 
                        caption="üì• YouTube –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @azams_bot"
                    )
                    logger.info("‚úÖ YouTube –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª")
                    
                    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if os.path.exists(file_path):
                        os.remove(file_path)
                    os.rmdir(tmp_dir)
                    
                except Exception as download_error:
                    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    if os.path.exists(tmp_dir):
                        for file in os.listdir(tmp_dir):
                            os.remove(os.path.join(tmp_dir, file))
                        os.rmdir(tmp_dir)
                    raise download_error
                
        elif "instagram.com" in url:
            # Instagram –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –û–ü–†–ï–î–ï–õ–Ø–ï–ú –¢–ò–ü –ö–û–ù–¢–ï–ù–¢–ê
            if not os.path.exists("cookies.txt"):
                await status.edit_text("‚ùå –§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. Instagram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                await asyncio.sleep(5)
                await status.delete()
                return
                
            try:
                # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await status.edit_text("üîç –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                media_info = await asyncio.to_thread(get_instagram_media_info, url)
                
                if media_info['type'] == 'video':
                    # –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û
                    await status.edit_text("üé• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                        if media_info.get('url'):
                            await message.reply_video(
                                media_info['url'], 
                                caption="üì• Instagram –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @azams_bot"
                            )
                            logger.info("‚úÖ Instagram –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É")
                        else:
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É")
                        
                    except Exception as e:
                        logger.warning(f"–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}, —Å–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
                        await status.edit_text("üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
                        tmp_dir = tempfile.mkdtemp()
                        
                        try:
                            file_path = await asyncio.to_thread(download_instagram_video, url, tmp_dir)
                            await message.reply_video(
                                file_path,
                                caption="üì• Instagram –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @azams_bot"
                            )
                            logger.info("‚úÖ Instagram –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª")
                            
                            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            if os.path.exists(file_path):
                                os.remove(file_path)
                            os.rmdir(tmp_dir)
                            
                        except Exception as download_error:
                            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                            if os.path.exists(tmp_dir):
                                for file in os.listdir(tmp_dir):
                                    os.remove(os.path.join(tmp_dir, file))
                                os.rmdir(tmp_dir)
                            raise download_error
                
                elif media_info['type'] == 'photo':
                    # –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û
                    await status.edit_text("üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
                    tmp_dir = tempfile.mkdtemp()
                    
                    try:
                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                        photo_paths = await asyncio.to_thread(download_instagram_photos, url, tmp_dir)
                        
                        if len(photo_paths) == 1:
                            # –û–¥–Ω–æ —Ñ–æ—Ç–æ
                            await message.reply_photo(
                                photo_paths[0],
                                caption="üì∏ Instagram —Ñ–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @azams_bot"
                            )
                            logger.info("‚úÖ Instagram —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        else:
                            # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (–∞–ª—å–±–æ–º)
                            media_group = []
                            for i, photo_path in enumerate(photo_paths):
                                if i == 0:
                                    media_group.append(InputMediaPhoto(
                                        photo_path, 
                                        caption="üì∏ Instagram —Ñ–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @azams_bot"
                                    ))
                                else:
                                    media_group.append(InputMediaPhoto(photo_path))
                            
                            await message.reply_media_group(media_group)
                            logger.info(f"‚úÖ Instagram –∞–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({len(photo_paths)} —Ñ–æ—Ç–æ)")
                        
                        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                        for photo_path in photo_paths:
                            if os.path.exists(photo_path):
                                os.remove(photo_path)
                        os.rmdir(tmp_dir)
                        
                    except Exception as download_error:
                        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        if os.path.exists(tmp_dir):
                            for file in os.listdir(tmp_dir):
                                os.remove(os.path.join(tmp_dir, file))
                            os.rmdir(tmp_dir)
                        raise download_error

        # –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï - —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Å—ã–ª–∫–æ–π
        await message.delete()
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        if status:
            try:
                error_msg = await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                await asyncio.sleep(5)
                await error_msg.delete()
            except Exception as delete_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {delete_error}")
                
    finally:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if status:
            try:
                await status.delete()
            except Exception as delete_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")
                
        # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if user_id in user_processing:
            user_processing[user_id]['processing'] = False


# ------------------------- –ó–ê–ü–£–°–ö -------------------------
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    schedule_restart()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    old_sessions = ["fast_bot.session", "fast_bot.session-journal"]
    for session_file in old_sessions:
        if os.path.exists(session_file):
            try:
                os.remove(session_file)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {session_file}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if os.path.exists("cookies.txt"):
        logger.info("‚úÖ –§–∞–π–ª cookies.txt –Ω–∞–π–¥–µ–Ω - Instagram –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        logger.warning("‚ö†Ô∏è –§–∞–π–ª cookies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω - Instagram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π...")
    logger.info("üìù –ë–æ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –¢–û–õ–¨–ö–û —Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è")
    logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    app.run()


