import os
import asyncio
import logging
import tempfile
import yt_dlp
import re
import time
import random
from pyrogram import Client, filters
from pyrogram.errors import BadRequest, BadMsgNotification

API_ID = 26670278
API_HASH = "e3d77390fd9c22d98bb6bddca86fef1a"
BOT_TOKEN = "6788128988:AAEMmCSafiiEqtS5UWQQxfo--W0On7B6Q08"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_processing = {}
processed_messages = set()

class SafeClient(Client):
    async def send(self, *args, **kwargs):
        for attempt in range(3):
            try:
                return await super().send(*args, **kwargs)
            except BadMsgNotification as e:
                if e.error_code == 16:
                    logger.warning(f"BadMsgNotification [16], –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3")
                    self.session.msg_id_offset = int(time.time() * 2**32)
                    await asyncio.sleep(1)
                else:
                    raise
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å msg_id —Å Telegram")

app = SafeClient(
    "video_bot_new_session_2024",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    sleep_threshold=15
)

# ------------------------- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï YOUTUBE –§–£–ù–ö–¶–ò–ò -------------------------

def download_youtube_video_enhanced(url: str, out_path: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ YouTube —Å –æ–±—Ö–æ–¥–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    ydl_opts = {
        "outtmpl": os.path.join(out_path, "%(title).100s.%(ext)s"),
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ 403 –æ—à–∏–±–∫–∏
        "format": "best[height<=720][ext=mp4]/best[height<=480][ext=mp4]/best[ext=mp4]/best",
        "noplaylist": True,
        "quiet": False,
        "ignoreerrors": True,
        "retries": 10,
        "fragment_retries": 10,
        "skip_unavailable_fragments": True,
        "continue_dl": True,
        "no_overwrites": True,
        "merge_output_format": "mp4",
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        "throttled_rate": "100K",
        "http_chunk_size": 10485760,
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        "http_headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en-US,en;q=0.9",
            "Accept-Encoding": "gzip, deflate, br",
            "Referer": "https://www.youtube.com/",
            "Origin": "https://www.youtube.com",
            "Sec-Fetch-Dest": "empty",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Site": "same-site",
        },
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è YouTube
        "extractor_args": {
            "youtube": {
                "player_client": ["android", "web"],
                "player_skip": ["configs", "webpage"],
            }
        },
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            time.sleep(random.uniform(1, 3))
            
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            
            if not os.path.exists(filename):
                raise Exception(f"–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {filename}")
                
            file_size = os.path.getsize(filename)
            if file_size == 0:
                os.remove(filename)
                raise Exception(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {filename}")
                
            logger.info(f"‚úÖ YouTube –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {filename} ({file_size} bytes)")
            return filename
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è YouTube: {e}")
        raise

def download_youtube_video_simple(url: str, out_path: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    ydl_opts = {
        "outtmpl": os.path.join(out_path, "%(title).100s.%(ext)s"),
        # –°–∞–º—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        "format": "worst[ext=mp4]/worstvideo[ext=mp4]+worstaudio/best[height<=360]",
        "noplaylist": True,
        "quiet": False,
        "ignoreerrors": True,
        "retries": 15,
        "fragment_retries": 15,
        "skip_unavailable_fragments": True,
        "continue_dl": True,
        "no_overwrites": True,
        "merge_output_format": "mp4",
        # –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        "throttled_rate": "50K",
        "http_headers": {
            "User-Agent": "Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
            "Accept": "*/*",
            "Accept-Language": "en-US,en;q=0.5",
        },
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
            time.sleep(random.uniform(3, 5))
            
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            
            if not os.path.exists(filename):
                raise Exception(f"–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {filename}")
                
            file_size = os.path.getsize(filename)
            if file_size == 0:
                os.remove(filename)
                raise Exception(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {filename}")
                
            logger.info(f"‚úÖ YouTube –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ (–ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥): {filename}")
            return filename
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")
        raise

def try_youtube_download(url: str, out_path: str) -> str:
    """–ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è YouTube"""
    methods = [
        ("–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥", download_youtube_video_enhanced),
        ("–ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥", download_youtube_video_simple),
    ]
    
    last_error = None
    
    for method_name, method_func in methods:
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É—é {method_name}...")
            return method_func(url, out_path)
        except Exception as e:
            last_error = e
            logger.warning(f"‚ùå {method_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            time.sleep(2)
            continue
    
    raise Exception(f"–í—Å–µ –º–µ—Ç–æ–¥—ã YouTube –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")

# ------------------------- INSTAGRAM –§–£–ù–ö–¶–ò–ò -------------------------

def check_cookies_file():
    if not os.path.exists("cookies.txt"):
        return False
    return os.path.getsize("cookies.txt") > 0

def try_instagram_download(url: str, out_path: str):
    """–ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å Instagram"""
    if not check_cookies_file():
        raise Exception("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª cookies.txt")
    
    ydl_opts = {
        "outtmpl": os.path.join(out_path, "instagram_%(title)s.%(ext)s"),
        "cookiefile": "cookies.txt",
        "quiet": False,
        "ignoreerrors": True,
        "retries": 3,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            
            for file in os.listdir(out_path):
                file_path = os.path.join(out_path, file)
                if os.path.isfile(file_path) and os.path.getsize(file_path) > 0:
                    return file_path, info
            
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Instagram –∫–æ–Ω—Ç–µ–Ω—Ç")
            
    except Exception as e:
        raise Exception(f"Instagram –æ—à–∏–±–∫–∞: {e}")

# ------------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò -------------------------

def extract_first_url(text: str) -> str:
    match = re.search(r"(https?://[^\s]+)", text)
    return match.group(1) if match else ""

def normalize_url(url: str) -> str:
    if "youtu.be/" in url:
        video_id = url.split("/")[-1].split("?")[0]
        return f"https://www.youtube.com/watch?v={video_id}"
    if "youtube.com/shorts/" in url:
        video_id = url.split("/shorts/")[-1].split("?")[0]
        return f"https://www.youtube.com/watch?v={video_id}"
    return url

def get_media_type(file_path: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞"""
    if not file_path:
        return "unknown"
    
    ext = file_path.lower().split('.')[-1]
    
    if ext in ['mp4', 'webm', 'mkv', 'mov', 'avi']:
        return "video"
    elif ext in ['jpg', 'jpeg', 'png', 'webp', 'gif']:
        return "photo"
    else:
        return "unknown"

async def safe_send_video(client, chat_id, file_path, caption=""):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ"""
    try:
        if not os.path.exists(file_path):
            raise Exception(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            raise Exception(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {file_path}")
            
        return await client.send_video(
            chat_id=chat_id,
            video=file_path,
            caption=caption,
            supports_streaming=True
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
        raise

async def safe_send_photo(client, chat_id, file_path, caption=""):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
    try:
        if not os.path.exists(file_path):
            raise Exception(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            raise Exception(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {file_path}")
            
        return await client.send_photo(
            chat_id=chat_id,
            photo=file_path,
            caption=caption
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        raise

# ------------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò -------------------------

@app.on_message(filters.command("start"))
async def start(client, message):
    message_id = f"start_{message.id}_{message.from_user.id}"
    
    if message_id in processed_messages:
        return
        
    processed_messages.add(message_id)
    
    await message.reply_text(
        "üé• **YouTube Video Downloader**\n\n"
        "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è –≤–∞—Å!\n\n"
        "‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:**\n"
        "‚Ä¢ YouTube –≤–∏–¥–µ–æ –ª—é–±–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "‚Ä¢ YouTube Shorts\n"
        "‚Ä¢ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–ø—ã\n\n"
        "‚ö° –ë—ã—Å—Ç—Ä–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ!\n"
        "üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤"
    )

@app.on_message(filters.command(["help", "info"]))
async def help_command(client, message):
    message_id = f"help_{message.id}_{message.from_user.id}"
    
    if message_id in processed_messages:
        return
        
    processed_messages.add(message_id)
    
    await message.reply_text(
        "ü§ñ **–ü–æ–º–æ—â—å –ø–æ YouTube –±–æ—Ç—É**\n\n"
        "üé• **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –ù–∞–π–¥–∏—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –±–æ—Ç—É\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ!\n\n"
        "üìπ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
        "‚Ä¢ –í–∏–¥–µ–æ –¥–æ 720p –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ (Shorts)\n"
        "‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ –≤–∏–¥–µ–æ\n\n"
        "‚ö° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!"
    )

@app.on_message(filters.command("test"))
async def test_command(client, message):
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    await message.reply_text(
        "üß™ **–¢–µ—Å—Ç YouTube –±–æ—Ç–∞**\n\n"
        "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üéâ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    )

@app.on_message(filters.text & filters.private)
async def handle_text(client, message):
    if message.text.startswith('/'):
        return
    
    message_id = f"text_{message.id}_{message.from_user.id}"
    
    if message_id in processed_messages:
        return
        
    user_id = message.from_user.id
    text = message.text.strip()
    
    url = extract_first_url(text)
    if not url:
        return

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ YouTube
    if not any(domain in url for domain in ["youtube.com", "youtu.be"]):
        await message.reply_text(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ YouTube —Å—Å—ã–ª–∫–∏\n\n"
            "üé• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞:\n"
            "‚Ä¢ YouTube –≤–∏–¥–µ–æ (youtube.com/watch?v=...)\n"
            "‚Ä¢ YouTube Shorts (youtube.com/shorts/...)\n"
            "‚Ä¢ –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ (youtu.be/...)\n\n"
            "‚ö° YouTube —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ!"
        )
        return

    processed_messages.add(message_id)
    
    if user_id in user_processing and user_processing[user_id].get('processing'):
        temp_msg = await message.reply_text("‚è≥ –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        await asyncio.sleep(3)
        await temp_msg.delete()
        processed_messages.discard(message_id)
        return

    user_processing[user_id] = {'processing': True}
    status = None
    
    try:
        url = normalize_url(url)
        status = await message.reply_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube —Å—Å—ã–ª–∫–∏...")
        
        # –¢–æ–ª—å–∫–æ YouTube –æ–±—Ä–∞–±–æ—Ç–∫–∞
        tmp_dir = tempfile.mkdtemp()
        file_path = None
        
        try:
            await status.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ...")
            
            # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å YouTube
            file_path = await asyncio.to_thread(try_youtube_download, url, tmp_dir)
            
            await status.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
            
            await safe_send_video(
                client,
                message.chat.id,
                file_path,
                caption="üì• YouTube –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @azams_bot"
            )
            logger.info("‚úÖ YouTube –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå YouTube –æ—à–∏–±–∫–∞: {e}")
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—à–∏–±–æ–∫
            error_msg = str(e)
            if "403" in error_msg:
                user_msg = (
                    "‚ùå YouTube –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ—Å—Ç—É–ø\n\n"
                    "üîß **–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É\n"
                    "‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–¥–µ–æ —Å –¥—Ä—É–≥–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º\n\n"
                    "‚ö° –û–±—ã—á–Ω–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ"
                )
            elif "Private" in error_msg or "private" in error_msg:
                user_msg = "‚ùå –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ. –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."
            elif "Unavailable" in error_msg:
                user_msg = "‚ùå –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ."
            elif "too long" in error_msg.lower():
                user_msg = "‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ shorter video."
            else:
                user_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ\n\n–ü—Ä–∏—á–∏–Ω–∞: {error_msg}"
            
            raise Exception(user_msg)
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            if file_path and os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except:
                    pass
            if os.path.exists(tmp_dir):
                try:
                    for file in os.listdir(tmp_dir):
                        os.remove(os.path.join(tmp_dir, file))
                    os.rmdir(tmp_dir)
                except:
                    pass

        # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await message.delete()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        if status:
            try:
                error_msg = await message.reply_text(str(e))
                await asyncio.sleep(10)
                await error_msg.delete()
            except:
                pass
                
    finally:
        if status:
            try:
                await status.delete()
            except:
                pass
        if user_id in user_processing:
            user_processing[user_id]['processing'] = False

# ------------------------- –ó–ê–ü–£–°–ö -------------------------
if __name__ == "__main__":
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
    old_sessions = ["fast_bot.session", "fast_bot.session-journal"]
    for session_file in old_sessions:
        if os.path.exists(session_file):
            try:
                os.remove(session_file)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {session_file}: {e}")
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ YouTube –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 403 –æ—à–∏–±–æ–∫...")
    logger.info("üé• –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é YouTube –≤–∏–¥–µ–æ!")
    app.run()
